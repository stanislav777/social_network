[{"F:\\WEB\\2020\\Kamasutra\\Projects\\wayOfTheSamurai\\react-1\\src\\index.tsx":"1","F:\\WEB\\2020\\Kamasutra\\Projects\\wayOfTheSamurai\\react-1\\src\\reportWebVitals.ts":"2","F:\\WEB\\2020\\Kamasutra\\Projects\\wayOfTheSamurai\\react-1\\src\\App.tsx":"3","F:\\WEB\\2020\\Kamasutra\\Projects\\wayOfTheSamurai\\react-1\\src\\components\\Navbar\\Navbar.tsx":"4","F:\\WEB\\2020\\Kamasutra\\Projects\\wayOfTheSamurai\\react-1\\src\\components\\Heder\\Header.tsx":"5","F:\\WEB\\2020\\Kamasutra\\Projects\\wayOfTheSamurai\\react-1\\src\\components\\Profile\\Profile.tsx":"6","F:\\WEB\\2020\\Kamasutra\\Projects\\wayOfTheSamurai\\react-1\\src\\components\\Profile\\MyPosts\\MyPosts.tsx":"7","F:\\WEB\\2020\\Kamasutra\\Projects\\wayOfTheSamurai\\react-1\\src\\components\\Profile\\MyPosts\\Post\\Post.tsx":"8","F:\\WEB\\2020\\Kamasutra\\Projects\\wayOfTheSamurai\\react-1\\src\\components\\Dialogs\\Dialogs.tsx":"9","F:\\WEB\\2020\\Kamasutra\\Projects\\wayOfTheSamurai\\react-1\\src\\components\\Profile\\MyPosts\\ProfileInfo\\ProfileInfo.tsx":"10","F:\\WEB\\2020\\Kamasutra\\Projects\\wayOfTheSamurai\\react-1\\src\\components\\Dialogs\\message\\message.tsx":"11","F:\\WEB\\2020\\Kamasutra\\Projects\\wayOfTheSamurai\\react-1\\src\\components\\Dialogs\\Message\\message.tsx":"12","F:\\WEB\\2020\\Kamasutra\\Projects\\wayOfTheSamurai\\react-1\\src\\components\\Dialogs\\DialogItem\\dialogItem.tsx":"13","F:\\WEB\\2020\\Kamasutra\\Projects\\wayOfTheSamurai\\react-1\\src\\redux\\state.tsx":"14","F:\\WEB\\2020\\Kamasutra\\Projects\\wayOfTheSamurai\\react-1\\src\\redux\\profile-reducer.tsx":"15","F:\\WEB\\2020\\Kamasutra\\Projects\\wayOfTheSamurai\\react-1\\src\\redux\\dialogs-rerducer.tsx":"16","F:\\WEB\\2020\\Kamasutra\\Projects\\wayOfTheSamurai\\react-1\\src\\redux\\redax-store.tsx":"17","F:\\WEB\\2020\\Kamasutra\\Projects\\wayOfTheSamurai\\react-1\\src\\components\\Profile\\MyPosts\\MyPostsContainer.tsx":"18","F:\\WEB\\2020\\Kamasutra\\Projects\\wayOfTheSamurai\\react-1\\src\\components\\Dialogs\\DialogsContainer.tsx":"19","F:\\WEB\\2020\\Kamasutra\\Projects\\wayOfTheSamurai\\react-1\\src\\components\\Users\\UsersContainer.tsx":"20","F:\\WEB\\2020\\Kamasutra\\Projects\\wayOfTheSamurai\\react-1\\src\\redux\\users-reducer.tsx":"21","F:\\WEB\\2020\\Kamasutra\\Projects\\wayOfTheSamurai\\react-1\\src\\components\\Users\\UsersAPIComponent.tsx":"22","F:\\WEB\\2020\\Kamasutra\\Projects\\wayOfTheSamurai\\react-1\\src\\components\\Users\\Users.tsx":"23","F:\\WEB\\2020\\Kamasutra\\Projects\\wayOfTheSamurai\\react-1\\src\\components\\Сommon\\Preloader\\Preloader.jsx":"24","F:\\WEB\\2020\\Kamasutra\\Projects\\wayOfTheSamurai\\react-1\\src\\components\\Profile\\ProfileContainer.jsx":"25"},{"size":518,"mtime":1615306149096,"results":"26","hashOfConfig":"27"},{"size":362,"mtime":499162500000,"results":"28","hashOfConfig":"27"},{"size":865,"mtime":1619473954866,"results":"29","hashOfConfig":"27"},{"size":1023,"mtime":1616523312608,"results":"30","hashOfConfig":"27"},{"size":294,"mtime":1610529711638,"results":"31","hashOfConfig":"27"},{"size":487,"mtime":1616576241576,"results":"32","hashOfConfig":"27"},{"size":1446,"mtime":1619473375331,"results":"33","hashOfConfig":"27"},{"size":664,"mtime":1612434727378,"results":"34","hashOfConfig":"27"},{"size":1556,"mtime":1614776529096,"results":"35","hashOfConfig":"27"},{"size":749,"mtime":1619471347031,"results":"36","hashOfConfig":"27"},{"size":293,"mtime":1611169271346,"results":"37","hashOfConfig":"27"},{"size":293,"mtime":1612532530797,"results":"38","hashOfConfig":"27"},{"size":423,"mtime":1611248376614,"results":"39","hashOfConfig":"27"},{"size":3257,"mtime":1616575988826,"results":"40","hashOfConfig":"27"},{"size":2255,"mtime":1616575988820,"results":"41","hashOfConfig":"27"},{"size":1417,"mtime":1616575538445,"results":"42","hashOfConfig":"27"},{"size":496,"mtime":1615659189880,"results":"43","hashOfConfig":"27"},{"size":1847,"mtime":1616576084596,"results":"44","hashOfConfig":"27"},{"size":1612,"mtime":1616575618923,"results":"45","hashOfConfig":"27"},{"size":2231,"mtime":1616523167331,"results":"46","hashOfConfig":"27"},{"size":2706,"mtime":1616575818425,"results":"47","hashOfConfig":"27"},{"size":2124,"mtime":1619468714330,"results":"48","hashOfConfig":"27"},{"size":2020,"mtime":1616524127002,"results":"49","hashOfConfig":"27"},{"size":203,"mtime":1616502473075,"results":"50","hashOfConfig":"27"},{"size":939,"mtime":1619473954880,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},"x2e4hj",{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"54"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"54"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"85"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"54"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"54"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"54"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"54"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"106","messages":"107","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"54"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"112"},{"filePath":"113","messages":"114","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"112"},"F:\\WEB\\2020\\Kamasutra\\Projects\\wayOfTheSamurai\\react-1\\src\\index.tsx",[],["116","117"],"F:\\WEB\\2020\\Kamasutra\\Projects\\wayOfTheSamurai\\react-1\\src\\reportWebVitals.ts",[],["118","119"],"F:\\WEB\\2020\\Kamasutra\\Projects\\wayOfTheSamurai\\react-1\\src\\App.tsx",[],"F:\\WEB\\2020\\Kamasutra\\Projects\\wayOfTheSamurai\\react-1\\src\\components\\Navbar\\Navbar.tsx",[],"F:\\WEB\\2020\\Kamasutra\\Projects\\wayOfTheSamurai\\react-1\\src\\components\\Heder\\Header.tsx",["120"],"import React from \"react\";\r\nimport s from \"./Header.module.css\";\r\n\r\nconst Header = () => {\r\n    return <header className={s.header}>\r\n        <img\r\n            src='https://www.logodesign.net/images/illustration-logo.png'/>\r\n    </header>\r\n}\r\nexport default Header","F:\\WEB\\2020\\Kamasutra\\Projects\\wayOfTheSamurai\\react-1\\src\\components\\Profile\\Profile.tsx",[],"F:\\WEB\\2020\\Kamasutra\\Projects\\wayOfTheSamurai\\react-1\\src\\components\\Profile\\MyPosts\\MyPosts.tsx",[],"F:\\WEB\\2020\\Kamasutra\\Projects\\wayOfTheSamurai\\react-1\\src\\components\\Profile\\MyPosts\\Post\\Post.tsx",[],"F:\\WEB\\2020\\Kamasutra\\Projects\\wayOfTheSamurai\\react-1\\src\\components\\Dialogs\\Dialogs.tsx",[],"F:\\WEB\\2020\\Kamasutra\\Projects\\wayOfTheSamurai\\react-1\\src\\components\\Profile\\MyPosts\\ProfileInfo\\ProfileInfo.tsx",["121","122"],"import React from \"react\";\r\nimport s from \"./ProfileInfo.module.css\";\r\nimport Preloader from '../../../Сommon/Preloader/Preloader';\r\nimport {ProfileType} from '../../../../redux/profile-reducer';\r\n\r\ntype ProfileInfoPropsType = {\r\n    profile: ProfileType\r\n\r\n}\r\n\r\n\r\nconst ProfileInfo = (props: ProfileInfoPropsType) => {\r\n    if (!props.profile){\r\n     return  <Preloader/>\r\n    }\r\n\r\n    return (\r\n        <div className={s.content}>\r\n            <img src='https://www.artd.ru/wp-content/uploads/2018/12/stydiya-tpl_01-01.jpg'/>\r\n            <div className={s.descriptionBlock}>\r\n                <img src={props.profile.photos.small}/>\r\n                ava + description\r\n            </div>\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\nexport default ProfileInfo;","F:\\WEB\\2020\\Kamasutra\\Projects\\wayOfTheSamurai\\react-1\\src\\components\\Dialogs\\message\\message.tsx",[],"F:\\WEB\\2020\\Kamasutra\\Projects\\wayOfTheSamurai\\react-1\\src\\components\\Dialogs\\Message\\message.tsx",[],"F:\\WEB\\2020\\Kamasutra\\Projects\\wayOfTheSamurai\\react-1\\src\\components\\Dialogs\\DialogItem\\dialogItem.tsx",[],"F:\\WEB\\2020\\Kamasutra\\Projects\\wayOfTheSamurai\\react-1\\src\\redux\\state.tsx",["123"],"import dialogsReducer from './dialogs-rerducer';\r\nimport profileReducer from './profile-reducer';\r\n\r\nexport type DialogPropsType =\r\n    {\r\n        id: number\r\n        name: string\r\n    }\r\n\r\nexport type MessagePropsType =\r\n    {\r\n        id: number\r\n        message: string\r\n    }\r\n\r\n\r\nexport type PostPropsType =\r\n    {\r\n        id: number\r\n        message: string\r\n        likesCounts: number\r\n    }\r\n\r\nexport type ProfilePageType = {\r\n    posts: Array<PostPropsType>\r\n    newPostText: string\r\n    profile: null | ProfileType\r\n    }\r\n\r\nexport type MessagesPageType = {\r\n    dialogs: Array<DialogPropsType>\r\n    messages: Array<MessagePropsType>\r\n    newMessageText: string\r\n}\r\n// export type usersPageType = {\r\n//     users: Array<userType>\r\n// }\r\nexport type UserType = {\r\n    id: number\r\n    photoUrl: string\r\n    followed: boolean\r\n    name: string\r\n    status: string\r\n    location: {\r\n        city: string\r\n        country: string\r\n    }\r\n    photos: {\r\n        small: string\r\n        large: string\r\n    }\r\n}\r\nexport type  ProfileType = {\r\n    userId: number\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string\r\n    fullName: string\r\n    contacts: object\r\n    github: string\r\n    vk: string\r\n    facebook: string\r\n    instagram: string\r\n    twitter: string\r\n    website: string\r\n    youtube: string\r\n    mainLink: string\r\n    photos: {\r\n        small: string\r\n        large: string\r\n    }\r\n}\r\n\r\n\r\n\r\nexport type rootStateType = {\r\n    profilePage: ProfilePageType,\r\n    dialogsPage: MessagesPageType,\r\n\r\n}\r\n\r\n\r\ntype  StoreType = {\r\n    _state: rootStateType\r\n    getState: () => rootStateType\r\n    subscriber: any\r\n    dispatch: (action: any) => void\r\n    _callSubscriber: (state: rootStateType) => void\r\n}\r\n\r\n\r\nlet store: StoreType = {\r\n\r\n    _state: /*rootStateType*/ {\r\n        profilePage: {\r\n            posts: [\r\n                {id: 1, message: 'Hello. How are you', likesCounts: 2184},\r\n                {id: 2, message: 'Yo. I am busy now.', likesCounts: 45},\r\n                {id: 3, message: 'Hello. i am your friend', likesCounts: 56},\r\n            ],\r\n            newPostText: '',\r\n           profile: null\r\n\r\n        },\r\n        dialogsPage: {\r\n            dialogs: [\r\n                {id: 1, name: 'Stanislav'},\r\n                {id: 2, name: 'Egor'},\r\n                {id: 3, name: 'Misha'},\r\n                {id: 5, name: 'Roma'},\r\n            ],\r\n            messages: [\r\n                {id: 1, message: 'Hi. How are you'},\r\n                {id: 2, message: 'All right'},\r\n                {id: 3, message: 'Good day'},\r\n                {id: 4, message: 'Hi. How are you'},\r\n            ],\r\n            newMessageText: ''\r\n        }\r\n    },\r\n    getState() {\r\n        return this._state\r\n    },\r\n    subscriber(callback: any) {\r\n        this._callSubscriber = callback;\r\n    },\r\n    _callSubscriber(state: rootStateType) {\r\n        console.log('state changed')\r\n    },\r\n\r\n    dispatch(action) {\r\n\r\n        this._state.profilePage = profileReducer(this._state.profilePage, action)\r\n        this._state.dialogsPage = dialogsReducer(this._state.dialogsPage, action)\r\n        // this._state.dialogsPage = sidebarReducer( this._state.dialogsPage, action )\r\n\r\n        this._callSubscriber(this._state);\r\n\r\n    }\r\n}\r\n\r\nexport default store;",["124","125"],"F:\\WEB\\2020\\Kamasutra\\Projects\\wayOfTheSamurai\\react-1\\src\\redux\\profile-reducer.tsx",[],"F:\\WEB\\2020\\Kamasutra\\Projects\\wayOfTheSamurai\\react-1\\src\\redux\\dialogs-rerducer.tsx",[],"F:\\WEB\\2020\\Kamasutra\\Projects\\wayOfTheSamurai\\react-1\\src\\redux\\redax-store.tsx",[],"F:\\WEB\\2020\\Kamasutra\\Projects\\wayOfTheSamurai\\react-1\\src\\components\\Profile\\MyPosts\\MyPostsContainer.tsx",["126"],"import React from 'react';\r\nimport {MyPosts} from './MyPosts';\r\nimport {connect} from 'react-redux';\r\nimport {Dispatch} from 'redux';\r\nimport {RootReduxState} from '../../../redux/redax-store';\r\nimport {addPostAC, PostPropsType, updateNewPostTextAC} from '../../../redux/profile-reducer';\r\n\r\n\r\n// type MyPostsContainerPropsType = {\r\n//     store: StoreType\r\n// }\r\n//\r\n// export const MyPostsContainer = (props: MyPostsContainerPropsType) => {\r\n//\r\n//     let state = props.store.getState();\r\n//\r\n//     let addPost = () => {\r\n//         props.store.dispatch(addPostActionCreator());\r\n//     }\r\n//\r\n//\r\n//     let onPostChange = (postText: string) => {\r\n//         let action = updateNewPostTextActionCreator(postText);\r\n//         props.store.dispatch(action)\r\n//     }\r\n//\r\n//\r\n//     return (\r\n//         <MyPosts updateNewPostText={onPostChange}\r\n//                  addPost={addPost}\r\n//                  posts={state.profilePage.posts}\r\n//                  newPostText={state.profilePage.newPostText}\r\n//         />\r\n//     )\r\n// }\r\ntype MapStateToPropsType = {\r\n    posts: Array<PostPropsType>\r\n    newPostText: string\r\n}\r\n\r\nlet mapStateToProps = (state: RootReduxState ): MapStateToPropsType => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        newPostText: state.profilePage.newPostText\r\n    }\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    updateNewPostText: (postText: string) => void\r\n    addPost: () => void\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\r\n    return {\r\n        updateNewPostText: (postText) => {\r\n            let action = updateNewPostTextAC(postText);\r\n            dispatch(action)\r\n        },\r\n\r\n        addPost: () => {\r\n            dispatch(addPostAC())\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport let MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\r\n\r\n","F:\\WEB\\2020\\Kamasutra\\Projects\\wayOfTheSamurai\\react-1\\src\\components\\Dialogs\\DialogsContainer.tsx",["127"],"import React from \"react\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {RootReduxState} from \"../../redux/redax-store\";\r\nimport {InitialDialogsState, sendMessageCreator, updateNewMessageTextCreator} from '../../redux/dialogs-rerducer';\r\nimport {connect} from \"react-redux\";\r\nimport {Dispatch} from \"redux\";\r\n\r\n// type  DialogsPropsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\n// const DialogsContainer = (props: DialogsPropsType) => {\r\n//\r\n//\r\n//     let onSendMessageClick = () => {\r\n//         props.sendMessage()\r\n//     }\r\n//\r\n//     let onNewMessageChange = (body: string) => {\r\n//        props.updateNewMessageBody(body)\r\n//     }\r\n//\r\n//\r\n//     return <Dialogs updateNewMessageBody={onNewMessageChange}\r\n//                     sendMessage={onSendMessageClick}\r\n//                     dialogsPage={props.dialogsPage}/>\r\n// }\r\n\r\ntype MapStateToPropsType = {\r\n    dialogsPage: InitialDialogsState\r\n}\r\n\r\nexport let mapStateToProps = (state: RootReduxState): MapStateToPropsType =>{\r\n    return {\r\n        dialogsPage: state.dialogsPage\r\n    }\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    updateNewMessageBody: (body: string) => void\r\n    sendMessage: () => void\r\n}\r\n\r\nexport let  mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType  => {\r\n    return {\r\n        updateNewMessageBody: (body: string) =>{\r\n            dispatch(updateNewMessageTextCreator(body))\r\n        },\r\n        sendMessage: () => {dispatch (sendMessageCreator())}\r\n\r\n    }\r\n}\r\n\r\n\r\nexport default  connect<MapStateToPropsType, MapDispatchToPropsType, {}, RootReduxState>(mapStateToProps,mapDispatchToProps)(Dialogs);\r\n\r\n","F:\\WEB\\2020\\Kamasutra\\Projects\\wayOfTheSamurai\\react-1\\src\\components\\Users\\UsersContainer.tsx",["128"],"import React from 'react';\r\nimport {follow, setCurrentPage, setIsFetching, setTotalCount, setUsers, unfollow} from '../../redux/users-reducer';\r\nimport {RootReduxState} from '../../redux/redax-store';\r\nimport UsersAPIComponent from './UsersAPIComponent';\r\nimport {connect} from 'react-redux';\r\nimport {UserType} from '../../redux/state';\r\n\r\ntype MapStateToPropsType = {\r\n    users: Array<UserType>\r\n    pageSize: number\r\n    totalUsersCount: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n}\r\n\r\nlet mapStateToProps = (state: RootReduxState): MapStateToPropsType => {\r\n    return {\r\n        users: state.usersPage.users,\r\n        pageSize: state.usersPage.pageSize,\r\n        totalUsersCount: state.usersPage.totalUsersCount,\r\n        currentPage: state.usersPage.currentPage,\r\n        isFetching: state.usersPage.isFetching\r\n    }\r\n}\r\n\r\n\r\ntype MapDispatchToPropsType = {\r\n    follow: (userId: number) => void\r\n    unfollow: (userId: number) => void\r\n    setUsers: (users: Array<UserType>) => void\r\n    setCurrentPage: (pageNumber: number) => void\r\n    setTotalCount: (totalCount: number) => void\r\n    toggleIsFetching: (isFetching: boolean) => void\r\n}\r\n\r\n// let mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\r\n//\r\n//     return {\r\n//         follow: (userId: number) => {\r\n//             dispatch(followAC(userId))\r\n//         },\r\n//\r\n//         unfollow: (userId: number) => {\r\n//\r\n//             dispatch(unfollowAC(userId))\r\n//\r\n//         },\r\n//         setUsers: (users: Array<UserType>) => {\r\n//             dispatch(setUsersAC(users))\r\n//         },\r\n//         setCurrentPage: (pageNumber: number) => {\r\n//             dispatch(setCurrentPageAC(pageNumber))\r\n//         },\r\n//         setTotalCount: (totalCount) => {\r\n//             dispatch(setTotalCountAC(totalCount))\r\n//         },\r\n//         toggleIsFetching: (isFetching: boolean) => {\r\n//             dispatch(setIsFetchingAC(isFetching))\r\n//         }\r\n//\r\n//     }\r\n//\r\n// }\r\n\r\nexport default connect<MapStateToPropsType, MapDispatchToPropsType, {}, RootReduxState>(mapStateToProps, {\r\n    follow,\r\n    unfollow,\r\n    setUsers,\r\n    setCurrentPage,\r\n    setTotalCount,\r\n    toggleIsFetching: setIsFetching\r\n})(UsersAPIComponent);","F:\\WEB\\2020\\Kamasutra\\Projects\\wayOfTheSamurai\\react-1\\src\\redux\\users-reducer.tsx",["129"],"import {UserType} from './state';\r\n\r\nconst FOLLOW = 'FOLLOW';\r\nconst UNFOLLOW = 'UNFOLLOW';\r\nconst SET_USERS = 'SET_USERS';\r\nconst SET_CURRENT_PAGE = 'SET_CURRENT_PAGE';\r\nconst SET_TOTAL_COUNT = 'SET_TOTAL_COUNT';\r\nconst TOGGLE_IS_FETCHING = 'TOGGLE_IS_FETCHING';\r\n\r\n\r\nlet initialState = {\r\n    users: [] as Array<UserType>,\r\n    pageSize: 50,\r\n    totalUsersCount: 50,\r\n    currentPage: 1,\r\n    isFetching: true,\r\n};\r\nexport type InitialUserState = typeof initialState\r\n\r\nconst usersReducer = (state: InitialUserState = initialState, action: ActionsType) => {\r\n\r\n    switch (action.type) {\r\n\r\n        case FOLLOW:\r\n            return {\r\n                ...state,\r\n                users: state.users.map(user => {\r\n                    if (user.id === action.userId) {\r\n                        return {...user, followed: false}\r\n                    }\r\n                    return user;\r\n                })\r\n            }\r\n\r\n        case  UNFOLLOW:\r\n            return {\r\n\r\n                ...state,\r\n                users: state.users.map(user => {\r\n                    if (user.id === action.userId) {\r\n                        return {...user, followed: true};\r\n                        alert('UNFOLLOW');\r\n                    }\r\n                    return user;\r\n\r\n                })\r\n            }\r\n        case SET_USERS:\r\n            return {\r\n                ...state, users: action.users\r\n            }\r\n        case  SET_CURRENT_PAGE:\r\n            return {\r\n                ...state, currentPage: action.currentPage,\r\n            }\r\n        case  SET_TOTAL_COUNT:\r\n            return {\r\n                ...state, totalUsersCount: action.count,\r\n            }\r\n        case  TOGGLE_IS_FETCHING:\r\n            return {\r\n                ...state, isFetching: action.isFetching,\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\nexport const follow = (userId: number) => ({type: FOLLOW, userId} as const)\r\nexport const unfollow = (userId: number) => ({type: UNFOLLOW, userId} as const)\r\nexport const setUsers = (users: Array<UserType>) => ({type: SET_USERS, users} as const)\r\nexport const setCurrentPage = (currentPage: number) => ({type: SET_CURRENT_PAGE, currentPage} as const)\r\nexport const setTotalCount = (totalUsersCount: number) => ({type: SET_TOTAL_COUNT, count: totalUsersCount} as const)\r\nexport const setIsFetching = (isFetching: boolean) => ({type: TOGGLE_IS_FETCHING, isFetching} as const)\r\n\r\ntype ActionsType =\r\n    | ReturnType<typeof follow>\r\n    | ReturnType<typeof unfollow>\r\n    | ReturnType<typeof setUsers>\r\n    | ReturnType<typeof setCurrentPage>\r\n    | ReturnType<typeof setTotalCount>\r\n    | ReturnType<typeof setIsFetching>\r\n\r\nexport default usersReducer","F:\\WEB\\2020\\Kamasutra\\Projects\\wayOfTheSamurai\\react-1\\src\\components\\Users\\UsersAPIComponent.tsx",[],"F:\\WEB\\2020\\Kamasutra\\Projects\\wayOfTheSamurai\\react-1\\src\\components\\Users\\Users.tsx",["130"],"import React from 'react';\r\nimport styles from './users.module.css';\r\nimport userPhoto from '../../assets/images/userspng.jpg';\r\nimport {UserType} from '../../redux/state';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\n\r\nexport type UsersPropsType = {\r\n    follow: (userId: number) => void\r\n    unfollow: (userId: number) => void\r\n    onPageChanged: (pageNumber: number) => void\r\n    users: Array<UserType>\r\n    pageSize: number\r\n    totalUsersCount: number\r\n    currentPage: number\r\n}\r\n\r\nlet Users = (props: UsersPropsType) => {\r\n    let pagesCount = Math.ceil(props.totalUsersCount / props.pageSize);\r\n    let pages = [];\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i)\r\n    }\r\n\r\n\r\n    return <div>\r\n        <div>\r\n            {pages.map(el => {\r\n                return <span className={props.currentPage === el ? styles.selectedPage : ''}\r\n                             onClick={() => {\r\n                                 props.onPageChanged(el)\r\n                             }}> {el} </span>\r\n            })}\r\n        </div>\r\n        {\r\n            props.users.map(user => <div key={user.id}>\r\n          <span>\r\n               <div>\r\n                   <NavLink to={'/profile/' +user.id}>\r\n                   <img src={user.photos.small != null ? user.photos.small : userPhoto} className={styles.userPhoto}/>\r\n                   </NavLink>\r\n               </div>\r\n              <div>\r\n                  {user.followed\r\n                      ? <button onClick={() => {\r\n                          props.follow(user.id)\r\n                      }}> Follow </button>\r\n                      : <button onClick={() => {\r\n                          props.unfollow(user.id)\r\n                      }}> unFollow </button>}\r\n              </div>\r\n          </span>\r\n                <span>\r\n              <span>\r\n                  <div>{user.name}</div>\r\n                  <div> {user.status} </div>\r\n              </span>\r\n          </span>\r\n            </div>)\r\n        }\r\n    </div>\r\n};\r\nexport default Users;","F:\\WEB\\2020\\Kamasutra\\Projects\\wayOfTheSamurai\\react-1\\src\\components\\Сommon\\Preloader\\Preloader.jsx",["131"],"import React from \"react\";\r\nimport preloader from \"../../../assets/images/1488.gif\";\r\n\r\n\r\nlet Preloder = (props) => {\r\n   return <div>\r\n    <img src={preloader}/>\r\n   </div>\r\n};\r\nexport default Preloder;",["132","133"],"F:\\WEB\\2020\\Kamasutra\\Projects\\wayOfTheSamurai\\react-1\\src\\components\\Profile\\ProfileContainer.jsx",["134"],"import React from 'react';\r\nimport Profile from \"./Profile\";\r\nimport axios from \"axios\";\r\nimport {connect} from \"react-redux\";\r\nimport {setUserProfileAC} from \"../../redux/profile-reducer\";\r\nimport {withRouter} from \"react-router\";\r\n\r\n\r\nclass ProfileContainer extends React.Component{\r\n    componentDidMount() {\r\n\r\n        debugger\r\n        axios.get(`https://social-network.samuraijs.com/api/1.0/profile/+`)\r\n            .then(response => {\r\n                this.props.setUserProfileAC(response.data);\r\n            })\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div>\r\n                <Profile {...this.props} profile={this.props.profile}   />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state) =>({\r\n    profile: state.profilePage.profile\r\n});\r\n\r\nconst ProfileContainerRouter = withRouter(ProfileContainer)\r\n\r\n\r\nexport default connect(mapStateToProps, {setUserProfileAC} ) (ProfileContainerRouter);\r\n",{"ruleId":"135","replacedBy":"136"},{"ruleId":"137","replacedBy":"138"},{"ruleId":"135","replacedBy":"139"},{"ruleId":"137","replacedBy":"140"},{"ruleId":"141","severity":1,"message":"142","line":6,"column":9,"nodeType":"143","endLine":7,"endColumn":76},{"ruleId":"141","severity":1,"message":"142","line":19,"column":13,"nodeType":"143","endLine":19,"endColumn":94},{"ruleId":"141","severity":1,"message":"142","line":21,"column":17,"nodeType":"143","endLine":21,"endColumn":56},{"ruleId":"144","severity":1,"message":"145","line":6,"column":5,"nodeType":"146","messageId":"147","endLine":6,"endColumn":18},{"ruleId":"135","replacedBy":"148"},{"ruleId":"137","replacedBy":"149"},{"ruleId":"144","severity":1,"message":"150","line":1,"column":8,"nodeType":"146","messageId":"147","endLine":1,"endColumn":13},{"ruleId":"144","severity":1,"message":"150","line":1,"column":8,"nodeType":"146","messageId":"147","endLine":1,"endColumn":13},{"ruleId":"144","severity":1,"message":"150","line":1,"column":8,"nodeType":"146","messageId":"147","endLine":1,"endColumn":13},{"ruleId":"151","severity":1,"message":"152","line":42,"column":25,"nodeType":"153","messageId":"154","endLine":42,"endColumn":43},{"ruleId":"141","severity":1,"message":"142","line":40,"column":20,"nodeType":"143","endLine":40,"endColumn":119},{"ruleId":"141","severity":1,"message":"142","line":7,"column":5,"nodeType":"143","endLine":7,"endColumn":27},{"ruleId":"135","replacedBy":"136"},{"ruleId":"137","replacedBy":"138"},{"ruleId":null,"fatal":true,"severity":2,"message":"155","line":12,"column":9},"no-native-reassign",["156"],"no-negated-in-lhs",["157"],["156"],["157"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","@typescript-eslint/no-unused-vars","'setTotalCount' is defined but never used.","Identifier","unusedVar",["156"],["157"],"'React' is defined but never used.","no-unreachable","Unreachable code.","ExpressionStatement","unreachableCode","Parsing error: Unexpected keyword 'debugger'\n\n\u001b[0m \u001b[90m 10 | \u001b[39m    componentDidMount() {\u001b[0m\n\u001b[0m \u001b[90m 11 | \u001b[39m        let \u001b[0m\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 12 | \u001b[39m        \u001b[36mdebugger\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m    | \u001b[39m        \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 13 | \u001b[39m        axios\u001b[33m.\u001b[39mget(\u001b[32m`https://social-network.samuraijs.com/api/1.0/profile/+`\u001b[39m)\u001b[0m\n\u001b[0m \u001b[90m 14 | \u001b[39m            \u001b[33m.\u001b[39mthen(response \u001b[33m=>\u001b[39m {\u001b[0m\n\u001b[0m \u001b[90m 15 | \u001b[39m                \u001b[36mthis\u001b[39m\u001b[33m.\u001b[39mprops\u001b[33m.\u001b[39msetUserProfileAC(response\u001b[33m.\u001b[39mdata)\u001b[33m;\u001b[39m\u001b[0m","no-global-assign","no-unsafe-negation"]